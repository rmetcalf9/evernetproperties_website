const sheet_name = 'Purchase Phase'

function get_sheet_values (spreadsheet, vueobj, sheet_id_map) {
  const data = [];

  data.push({
    range: sheet_name + '!A1',
    values: [['=HYPERLINK("www.evernetproperties.com", "Project calculation generated by www.evernetproperties.com")']]
  })
  data.push({
    range: sheet_name + '!A2:B2',
    values: [['Patch:', vueobj.patch.name]]
  })
  data.push({
    range: sheet_name + '!A3:B3',
    values: [['Address:', vueobj.serialized_data.dealbasicinfo.address]]
  })
  data.push({
    range: sheet_name + '!E3:E3',
    values: [[vueobj.serialized_data.dealbasicinfo.postcode]]
  })
  data.push({
    range: sheet_name + '!A4:A4',
    values: [['Links:']]
  })
  let cur_row = 3
  vueobj.serialized_data.dealbasicinfo.weblinks.forEach(function (x) {
    cur_row = cur_row + 1
    data.push({
      range: sheet_name + '!B' + cur_row.toString() + ':B' + cur_row.toString(),
      values: [['=HYPERLINK("' + x.label + '", "' + x.label + '")']]
    })
  })
  cur_row = cur_row + 1

  cur_row = cur_row + 1
  data.push({
    range: sheet_name + '!A' + cur_row.toString() + ':B' + cur_row.toString(),
    values: [['Selling Agent:', vueobj.serialized_data.dealbasicinfo.selling_agent]]
  })
  cur_row = cur_row + 1
  data.push({
    range: sheet_name + '!A' + cur_row.toString() + ':B' + cur_row.toString(),
    values: [['Notes:', vueobj.serialized_data.dealbasicinfo.notes]]
  })
  cur_row = cur_row + 1
  data.push({
    range: sheet_name + '!A' + cur_row.toString() + ':B' + cur_row.toString(),
    values: [['Vision:', vueobj.serialized_data.vision.devplan]]
  })


  return data
}

function get_sheet (spreadsheet, vueobj, sheet_id_map) {
  const requests = [];

  requests.push({
    "repeatCell": {
      "range": {
        "sheetId": sheet_id_map[sheet_name],
        "startRowIndex": 0,
        "endRowIndex": vueobj.serialized_data.dealbasicinfo.weblinks.length + 6 + 1,
        "startColumnIndex": 0,
        "endColumnIndex": 1
      },
      "cell": {
        "userEnteredFormat": {
          "textFormat": {
            "bold": true
          },
          "verticalAlignment": "TOP"
        }
      },
      "fields": "userEnteredFormat(textFormat, verticalAlignment)"
    }
  })

  return requests
}

export default {
  sheet_name: sheet_name,
  get_sheet_values: get_sheet_values,
  get_sheet: get_sheet
}
