import utils from './_utils.js'

const sheet_name = 'Purchase Phase'

// ALways in sequence. 0=Cash, 1=Mortgage, 2=Bridge

function get_cash_type(spreadsheet, vueobj, sheet_id_map) {
  return {
    name: 'Buying Cash',
    pre_stage: function (context) {return [] },
    start_details: function () {
      return [
        ['Purchase Price', vueobj.serialized_data.purchaseprice.purchaserangevalue.max, vueobj.serialized_data.purchaseprice.purchaserangevalue.min]
      ]
    },
    end_details: function () { return [] },
  }
}
function get_mortgage_type(spreadsheet, vueobj, sheet_id_map) {
  return {
    name: 'Buying with a Mortgage',
    pre_stage: function (context) {
      const data = [];
      context.cur_row = context.cur_row + 1
      data.push({
        range: sheet_name + '!A' + context.cur_row.toString(),
        values: [['IN TEST 1']]
      })

      context.cur_row = context.cur_row + 1
      data.push({
        range: sheet_name + '!A' + context.cur_row.toString(),
        values: [['IN TEST 2']]
      })
      return data
    },
    start_details: function () { return [] },
    end_details: function () {
      return [
        ['Mortgage Payments TODO', 1, 1]
      ]
    },
  }
}

function getType(spreadsheet, vueobj, sheet_id_map) {
  return get_cash_type(spreadsheet, vueobj, sheet_id_map)
  //return get_mortgage_type(spreadsheet, vueobj, sheet_id_map)
}

function get_sheet_values (spreadsheet, vueobj, sheet_id_map) {
  const su = utils.get_sheet_utils(sheet_id_map[sheet_name])
  let requests = [];
  const value_requests = [];
  let context = {
    cur_row: 0
  }
  requests.push(su.adjustcolumnwidth(0,150))

  context.cur_row = context.cur_row + 1
  value_requests.push({
    range: sheet_name + '!A' + context.cur_row.toString(),
    values: [['=HYPERLINK("www.evernetproperties.com", "Project calculation generated by www.evernetproperties.com")']]
  })

  context.cur_row = context.cur_row + 1
  value_requests.push({
    range: sheet_name + '!A' + context.cur_row.toString() + ':B' + context.cur_row.toString(),
    values: [['Patch:', vueobj.patch.name]]
  })

  context.cur_row = context.cur_row + 1
  value_requests.push({
    range: sheet_name + '!A' + context.cur_row.toString() + ':B' + context.cur_row.toString(),
    values: [['Address:', vueobj.serialized_data.dealbasicinfo.address]]
  })
  value_requests.push({
    range: sheet_name + '!E' + context.cur_row.toString() + ':E' + context.cur_row.toString(),
    values: [[vueobj.serialized_data.dealbasicinfo.postcode]]
  })
  requests.push(su.makeboldandvaligntop(0,context.cur_row,0,1))

  context.cur_row = context.cur_row + 1

  const purchase_type = getType(spreadsheet, vueobj, sheet_id_map)

  context.cur_row = context.cur_row + 1
  value_requests.push({
    range: sheet_name + '!A' + context.cur_row.toString() + ':A' + context.cur_row.toString(),
    values: [[purchase_type.name]]
  })
  requests.push(su.makeboldandvaligntop(context.cur_row-1,context.cur_row,0,1))


  value_requests.push(purchase_type.pre_stage(context))

  // Title
  context.cur_row = context.cur_row + 1
  value_requests.push({
    range: sheet_name + '!A' + context.cur_row.toString() + ':C' + context.cur_row.toString(),
    values: [['', 'Worst', 'Best']]
  })
  requests.push(su.makeboldandvaligntop(context.cur_row-1,context.cur_row,1,3))

  const row_start_of_details = context.cur_row
  let details = purchase_type.start_details()
  details.push(['Refurbishment', vueobj.refurb_cost_total.max, vueobj.refurb_cost_total.min])
  details.push(['Stamp Duty', vueobj.stampduty_total.max, vueobj.stampduty_total.min])
  vueobj.othercosts_items_detail.forEach(function (ite) {
    details.push([ite.name, -1 * ite.worst, -1 * ite.best])
  })

  // Now add in the fixed loan costs
  vueobj.caculated_loan_details.forEach(function (loan) {
    details.push([loan.name + ' interest', loan.interest, loan.interest])
  })

  details.push(purchase_type.end_details())

  details.forEach(function (detail) {
    context.cur_row = context.cur_row + 1
    value_requests.push({
      range: sheet_name + '!A' + context.cur_row.toString() + ':C' + context.cur_row.toString(),
      values: [[detail[0], detail[1], detail[2]]]
    })
  })
  requests.push(su.makeboldandvaligntop(row_start_of_details,context.cur_row,0,1))
  //TODO Mortgage not bold italic if needed

  context.cur_row = context.cur_row + 1
  value_requests.push({
    range: sheet_name + '!A' + context.cur_row.toString() + ':C' + context.cur_row.toString(),
    values: [['Total', '=SUM(B' + (row_start_of_details+1).toString() + ':B' + (context.cur_row-1).toString() + ')', '=SUM(C' + (row_start_of_details+1).toString() + ':C' + (context.cur_row-1).toString() + ')']]
  })
  requests.push(su.makeboldandvaligntop(context.cur_row-1,context.cur_row,0,3))


  return {
    value_requests: value_requests,
    requests: requests
  }
}


export default {
  sheet_name: sheet_name,
  get_sheet_values: get_sheet_values
}
