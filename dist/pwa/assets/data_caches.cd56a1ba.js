import{a2 as h}from"./index.69d4ee77.js";const e={projects:{apiprefix:"privateUserAPIPrefix",url:"/projects",getOnSaveCacheInvalidationList:f},patches:{apiprefix:"privateUserAPIPrefix",url:"/patches"},patchagents:{apiprefix:"privateUserAPIPrefix",url:"/patchagents"},static:{apiprefix:"infoutilityAPIPrefix",url:"/static"}};function f(i){return[{object_type:"patches",object_id:i.patch_id}]}function o(){let i={};return Object.keys(e).map(function(a){i[a]={}}),i}const u=h("dataCachesStore",{state:()=>({cache_data:o()}),getters:{},actions:{reset(){this.cache_data=o()},invalidate({object_type:i,object_id:a}){if(!Object.hasOwn(e,i)){console.log("Warning - invalid object type in invalidate message",i);return}!Object.hasOwn(this.cache_data[i],a)||delete this.cache_data[i][a]},save({backend_connection_store:i,object_type:a,object_data:n,callback:s}){const r=this;if(!Object.hasOwn(e,a)){s.error("Tried to save invalid object type "+a);return}const d={ok:function(c){r.cache_data[a][c.data.id]=c.data,s.ok(c)},error:s.error};typeof e[a].getOnSaveCacheInvalidationList!="undefined"&&e[a].getOnSaveCacheInvalidationList(n).forEach(function(t){r.invalidate(t)}),i.call_api({apiprefix:e[a].apiprefix,url:e[a].url,method:"POST",data:n,callback:d})},get({backend_connection_store:i,object_type:a,object_id:n,skip_cache:s,callback:r}){if(!Object.hasOwn(e,a)){r.error("Tried to load invalid object type "+a);return}const d=this;if(!s&&Object.hasOwn(d.cache_data[a],n)){const t={data:d.cache_data[a][n]};r.ok(t);return}const c={ok:function(t){typeof t.data.id=="undefined"&&console.log("Warning response object has no ID - will save into cache and always re save"),d.cache_data[a][t.data.id]=t.data,r.ok(t)},error:r.error};i.call_api({apiprefix:e[a].apiprefix,url:e[a].url+"/"+n,method:"GET",data:void 0,callback:c})},get_direct_from_cache({object_type:i,object_id:a}){if(!!Object.hasOwn(e,i))return this.cache_data[i][a]}}});export{u};
